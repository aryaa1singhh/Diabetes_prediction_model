# -*- coding: utf-8 -*-
"""DiabetesPredictionModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cyAO4aykcczFbdWC8b9JKtN25L6FplOk
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

df = pd.read_csv("diabetes.csv")

df.head(10)

df.shape

df.isnull().sum()

df.describe()

df["Outcome"].value_counts()

df.groupby("Outcome").mean()

#seperating the data and labels
x = df.drop(columns = "Outcome", axis = 1)
y = df["Outcome"]

print(x)

print(y)

#data standardization
scaler = StandardScaler()
scaler.fit(x)

standardizes_data = scaler.transform(x)

std_df = pd.DataFrame(standardizes_data)
print(standardizes_data)
print(std_df)

x_train, x_test,y_train, y_test = train_test_split(x,y,test_size= 0.2,stratify = y, random_state =2 )

model1 = svm.SVC(kernel = "linear")

model1.fit(x_train, y_train)

x_train_prediction = model1.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train )

print("the accuracy score of the model trained is", training_data_accuracy)

x_test_prediction = model1.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("the accuracy score of the model trained on the testing data", testing_data_accuracy)

#predicting system
input_data = [4,110,92,0,0,37.6,0.191,30]

input_data_array = np.asarray(input_data)

reshape_data = input_data_array.reshape(1,-1)

std_data = scaler.transform(reshape_data)
print(std_data)

prediction = model1.predict(std_data)
if(prediction[0] == 0):
  print("the patient is not diabetic")
else:
  print("the patient is diabetic")

model2 = LogisticRegression(max_iter=1000)

model2.fit(x_train,y_train)

model2_train_prediction = model2.predict(x_train)
model2_train_acuuracy = accuracy_score(model2_train_prediction,y_train)
confusionMatrix = confusion_matrix(model2_train_prediction,y_train)

print(model2_train_acuuracy)

print(confusionMatrix)

model2_test_pred = model2.predict(x_test)
model2_test_accuracy = accuracy_score(model2_test_pred,y_test)

print(model2_test_accuracy )



model3 = DecisionTreeClassifier(max_depth=5, random_state=42)
model3.fit(x_train,y_train)

model3_train_pred = model3.predict(x_train)
model3_train_pred_accuracy = accuracy_score(model3_train_pred, y_train)

print(model3_train_pred_accuracy)

model3_test_pred = model3.predict(x_test)
model3_test_pred_accuracy = accuracy_score(model3_test_pred, y_test)

print(model3_test_pred_accuracy)









